var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DAMMmodel","category":"page"},{"location":"#DAMMmodel","page":"Home","title":"DAMMmodel","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DAMMmodel]","category":"page"},{"location":"#DAMMmodel.DAMM-Tuple{Any, Any}","page":"Home","title":"DAMMmodel.DAMM","text":"DAMM(x, p)\n\nCalculate respiration as a function of soil temperature and moisture.\n\nExamples\n\njulia> Ts = [18.0, 22.0] # 2 values soil temperature [°C]\njulia> SWC = [0.35, 0.22] # 2 values of soil moisture [m3m-3]\njulia> x = hcat(Ts, SWC)\njulia> p = [1e8, 62, 3.46e-8, 2.0e-3, 0.4, 0.0125] # α, Ea, kMsx, kMO2, Sxtot\njulia> DAMM(x, p)\n  1.33\n  2.33\n\n\n\n\n\n","category":"method"},{"location":"#DAMMmodel.DAMMfit-Tuple{Any, Any, Any}","page":"Home","title":"DAMMmodel.DAMMfit","text":"DAMMfit(Ind_var, Resp, poro_val)\n\nfit the DAMM model parameters to data. \n\nExamples\n\njulia> Ts = [19.0, 22.0] # 2 values soil temperature [°C]\njulia> SWC = [0.35, 0.22] # 2 values of soil moisture [m3m-3]\njulia> Resp = [2, 4] # respiration observation\njulia> Ind_var = hcat(Ts, SWC)\njulia> p = DAMMfit(Ind_var, Resp, 0.4) # fitted params α, Ea, kMsx, kMO2, Sxtot\n  3.533e8\n 63.604\n  2.489e-10\n  0.005\n  0.4\n  0.02\njulia> DAMM(Ind_var, p)\n  2\n  4\n\n\n\n\n\n","category":"method"},{"location":"#DAMMmodel.DAMMmat-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}","page":"Home","title":"DAMMmodel.DAMMmat","text":"DAMMmat(Ts::Array{Float64, 1}, θ::Array{Float64, 1}, R::Array{Float64, 1}, r::Int64)\n\nGenerates a matrix of DAMM output for gridded inputs x and y Inputs: soil temperature (Ts), soil moisture (θ), respiration (R), resolution (r)\n\nExamples:\n\njulia> Ts = collect(15.0:2.5:40.0)\njulia> θ = collect(0.2:0.05:0.7)\njulia> R = [1.0, 1.2, 1.5, 2.0, 2.7, 3.8, 4.9, 6.7, 4.1, 2.0, 0.4]\njulia> r = 10\njulia> poro_val, params, x, y, DAMM_Matrix = DAMMmat(Ts, θ, R, r)\n\nDAMMmat(Ts::Array{Float64, 1}, θ::Array{Float64, 1}, R::Array{Float64, 1}, r::Int64, n::Int64)\n\nBin data by n quantiles \n\nExamples:\n\njulia> n = 4\njulia> poro_val, Tmed, θmed, Rmed, params, x, y, DAMM_Matrix = DAMMmat(Ts, θ, R, r, n)\n\n\n\n\n\n","category":"method"},{"location":"#DAMMmodel.DAMMplot-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Int64}","page":"Home","title":"DAMMmodel.DAMMplot","text":"DAMMplot(Ts::Array{Float64, 1}, θ::Array{Float64, 1}, R::Array{Float64, 1}, r::Int64)\n\nPlot scatter of data and fitted DAMM surface\n\nExample\n\njulia> Ts = collect(15.0:2.5:40.0)\njulia> θ = collect(0.2:0.05:0.7)\njulia> R = [1.0, 1.2, 1.5, 2.0, 2.7, 3.8, 4.9, 6.7, 4.1, 2.0, 0.4]\njulia> r = 10\njulia> fig = DAMMplot(Ts, θ, R, r)\n\n\n\n\n\n","category":"method"},{"location":"#DAMMmodel.DAMMviz-Tuple{}","page":"Home","title":"DAMMmodel.DAMMviz","text":"DAMMviz()\n\nInteractive plot of the DAMM model\n\nTo open\n\njulia> DAMMviz()\n\n\n\n\n\n","category":"method"},{"location":"#DAMMmodel.qbins-NTuple{4, Any}","page":"Home","title":"DAMMmodel.qbins","text":"qbins(x, y, z, n)\n\nBins x into n quantiles, each xbin into n quantiles of y, return z quantile\n\nExamples\n\njulia> df = DataFrame(x=1:20, y=6:25, z=11:30)\njulia> xmed, ymed, zmed = qbins(df.T, df.M, df.R, 3)\n  xmed = [9, 9, 9, 15, 15, 15, 21, 21, 21]\n  ymed = [12, 14, 16, 19, 20.5, 22, 25, 27, 29]\n  zmed = [2, 4, 6, 8.5, 10.5, 15, 17, 19]\n\n\n\n\n\n","category":"method"}]
}
